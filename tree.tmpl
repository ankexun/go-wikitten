{{define "tree"}}
    <div id="tree-filter" class="input-group">
        <input type="text" id="tree-filter-query" placeholder="Search file &amp; directory names." class="form-control input-sm">
        <a id="tree-filter-clear-query" title="Clear current search..." class="input-group-addon input-sm">
            <i class="glyphicon glyphicon-remove"></i>
        </a>
    </div>
    <ul class="ztree" id="tree-filter-results"></ul>
    <!-- <ul class="unstyled" id="tree"></ul> -->
    <ul id="treeDemo" class="ztree"></ul>

    <script>
        var setting = {
            data: {
               key: {
                isParent: "isDir",
               }
            },
            callback: {
                beforeClick: getCurrentNode,
                // onClick: zTreeOnClick
            },
            // view: {
			// 	addDiyDom: addDiyDom
		    // }
       };

        /**标准数据格式*/
        let data = {{.tree}}
        reSort(data)
        deleteEmptyProperty(data)
        
        $(document).ready(function(){
            /**为容器初始化数据*/
            var treeObj = $.fn.zTree.init($("#treeDemo"), setting, data);
            // 默认展开第一级
            var nodes = treeObj.getNodes();
            if (nodes.length>0) {
                for(var i=0;i<nodes.length;i++){
                treeObj.expandNode(nodes[i], true, false, false);
                }
            }
        });

// function addDiyDom(treeId, treeNode) {
//     var spaceWidth = 5;
//     var switchObj = $("#" + treeNode.tId + "_switch"),
//     icoObj = $("#" + treeNode.tId + "_ico");
//     switchObj.remove();
//     icoObj.parent().before(switchObj);
//     var spantxt = $("#" + treeNode.tId + "_span").html();
//     if (spantxt.length > 19) {
//         spantxt = spantxt.substring(0, 29) + "...";
//         $("#" + treeNode.tId + "_span").html(spantxt);
//     }
// }

function getCurrentNode(treeId, treeNode) {
       curNode = treeNode;
       zTreeOnClick(curNode);
    }
function zTreeOnClick(treeNode) {
    $.ajax({
       type: "POST",
       url : "/",
       data: {
           name: treeNode.path,
           isDir: treeNode.isDir
       } ,
       //请求成功
       success : function(result) {
                // console.log(result.content);
                if (result.content != ""){
                    $("#content .inner").html(result.content);
                    // 解决code prettify不加载的问题
                    prettyPrint();
                }
            },
            //请求失败，包含具体的错误信息
            error : function(e){
                console.log(e.status);
                console.log(e.responseText);
            }
    });
};

// 递归删除空对象
function deleteEmptyProperty(object){
    for (var i in object) {
        var value = object[i];
        
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                if (value.length == 0) {
                    delete object[i];
                    // console.log('delete Array', i);
                    continue;
                }
            }
            deleteEmptyProperty(value);
            if (isEmpty(value)) {
                // console.log('isEmpty true', i, value);
                delete object[i];
                // console.log('delete a empty object');
            }
        } else {
            if (value === '' || value === null || value === undefined) {
                delete object[i];
                // console.log('delete ', i);
            } else {
                // console.log('check ', i, value);
            }
        }
    }
}

function isEmpty(object) {
    for (var name in object) {
        return false;
    }
    return true;
}

// 排序,目录在前,文件在后
function reSort(object){
    let sortedDir = [];
    let sortedFile = [];
    for (var i in object) {
        var value = object[i];
        
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                value.forEach(element => {
                    if (element.isDir) {
                        sortedDir.push(element)
                    } else {
                        sortedFile.push(element)
                    }
                    if (element.hasOwnProperty('children')) {
                        reSort(element)
                    }
                })
            }
        }
    }
    // 替换成排序后的children
    object.children = sortedDir.concat(sortedFile)
}
</script>

    <!-- 搜索栏 -->
    <script>
        // Case-insensitive alternative to :contains():
        // All credit to Mina Gabriel:
        // http://stackoverflow.com/a/15033857/443373
        $.expr[':'].containsIgnoreCase = function (n, i, m) {
            return jQuery(n).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
        };
        $(document).ready(function() {
            var iconFolderOpenClass  = 'glyphicon glyphicon-folder-open',
                iconFolderCloseClass = 'glyphicon glyphicon-folder-close',
                // Handle live search/filtering:
                tree             = $('#treeDemo'),
                resultsTree      = $('#tree-filter-results')
                filterInput      = $('#tree-filter-query'),
                clearFilterInput = $('#tree-filter-clear-query'),
                subTree = localStorage.getItem('selectSubTree')
            ;
            $('a[data-role="directory"]').each(function(){
                var href = $(this).attr('name');
                if ( href == subTree ) {
                    console.log(href)
                    $(this).addClass('intro')
                    $(this).parent().slideDown({ duration: 100 })
                    $(this).siblings('ul').slideDown({ duration: 100 })
                }
            });
            
            // Auto-focus the search field:
            filterInput.focus();
            // Cancels a filtering action and puts everything back
            // in its place:
            function cancelFilterAction()
            {
                filterInput.val('').removeClass('active');
                resultsTree.empty();
                tree.show();
            }
            // Clear the filter input when the X to its right is clicked:
            clearFilterInput.click(cancelFilterAction);
            // Same thing if the user presses ESC and the filter is active:
            $(document).keyup(function(e) {
                e.keyCode == 27 && filterInput.hasClass('active') && cancelFilterAction();
            });
            // Perform live searches as the user types:
            // @todo: check support for 'input' event across more browsers?
            filterInput.bind('input', function() {
                var value         = filterInput.val(),
                    query         = $.trim(value),
                    isActive      = value != ''
                ;
                // Add a visual cue to show that the filter function is active:
                filterInput.toggleClass('active', isActive);
                // If we have no query, cleanup and bail out:
                if(!isActive) {
                    cancelFilterAction();
                    return;
                }
                // Hide the actual tree before displaying the fake results tree:
                if(tree.is(':visible')) {
                    tree.hide();
                }
                // Sanitize the search query so it won't so easily break
                // the :contains operator:
                query = query
                            .replace(/\(/g, '\\(')
                            .replace(/\)/g, '\\)')
                        ;
                // Get all nodes containing the search query (searches for all a, and returns
                // their parent nodes <li>).
                resultsTree.html(tree.find('a:containsIgnoreCase(' + query + ')').parent().clone());
            });
            // Handle directory-tree expansion:
            $(document).on('click', '#tree a[data-role="directory"]', function (event) {
                event.preventDefault();
                console.log($(this).attr('name'))
                localStorage.setItem('selectSubTree',$(this).attr('name'))
                let siblingsLength = $(this).siblings().length
                if ( siblingsLength > 0 ) {
                    if ( !$(this).hasClass("intro") ) {
                        $(this).siblings('ul').slideDown({ duration: 100 })
                        $(this).addClass('intro')
                    }
                    else {
                        $(this).siblings('ul').slideUp({ duration: 100 })
                        $(this).removeClass('intro')
                    }  
                } 
            });
            $(document).on('click', '#tree a[data-role="no"]', function (event) {
                console.log($(this).attr('name'))
                localStorage.setItem('selectSubTree',$(this).attr('name'))
            });
        });
    </script>
{{end}}

